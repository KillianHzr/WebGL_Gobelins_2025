#!/bin/bash

# Script pour optimiser r√©cursivement les fichiers GLB/glTF
# avec compression Draco pour compatibilit√© Three.js
# Utilise la syntaxe correcte de gltf-transform CLI

SOURCE_DIR="./models_original"
OUTPUT_DIR="./models_optimized"

# Configuration
TEXTURE_SIZE=1024         # Taille max des textures
TEXTURE_FORMAT="webp"     # Format de compression (webp, ktx2, avif)
DRACO_METHOD="edgebreaker" # M√©thode Draco (edgebreaker ou sequential)
WEBP_QUALITY=85           # Qualit√© WebP (0-100)
WELD_TOLERANCE=0.0001     # Tol√©rance pour weld
RESAMPLE_TOLERANCE=0.001  # Tol√©rance pour le resampling d'animations

echo "üöÄ Optimisation GLB/glTF avec compression Draco"
echo "üîç Parcours de $SOURCE_DIR pour optimisation..."
echo "üìÅ Dossier de destination : $OUTPUT_DIR"
echo "üóúÔ∏è  Configuration:"
echo "   - M√©thode Draco: $DRACO_METHOD"
echo "   - Textures: $TEXTURE_FORMAT max ${TEXTURE_SIZE}px (qualit√© $WEBP_QUALITY)"
echo "   - Weld tolerance: $WELD_TOLERANCE"
echo "   - Resample tolerance: $RESAMPLE_TOLERANCE"
echo ""

# V√©rification des d√©pendances
if ! command -v gltf-transform &> /dev/null; then
    echo "‚ùå Erreur: gltf-transform n'est pas install√©."
    echo "üì• Installation: npm install -g @gltf-transform/cli"
    exit 1
fi

# V√©rification de la version
GLTF_VERSION=$(gltf-transform --version 2>/dev/null | head -n1)
echo "üîß Version gltf-transform: $GLTF_VERSION"
echo ""

# Cr√©ation du dossier de sortie
mkdir -p "$OUTPUT_DIR"

# Variables globales pour les statistiques
declare -g total_original_size=0
declare -g total_optimized_size=0
declare -g success_count=0
declare -g error_count=0

# Fonction pour d√©tecter les animations
has_animations() {
    local file="$1"
    if gltf-transform inspect "$file" 2>/dev/null | grep -q "animations"; then
        return 0  # A des animations
    else
        return 1  # Pas d'animations
    fi
}

# Fonction pour optimiser un fichier avec la bonne syntaxe
optimize_file() {
    local input_file="$1"
    local output_path="$2"
    local file_number="$3"
    local total_files="$4"

    local relative_path="${input_file#$SOURCE_DIR/}"
    echo "[$file_number/$total_files] üîß Optimisation : $relative_path"

    # D√©tection des animations
    local has_anim=false
    if has_animations "$input_file"; then
        has_anim=true
        echo "  üé¨ Animations d√©tect√©es - optimisations d'animations activ√©es"
    fi

    # M√©thode 1: Utiliser la commande optimize (limit√©e mais efficace)
    echo "  üîÑ Optimisation avec commande optimize..."
    if gltf-transform optimize "$input_file" "$output_path" \
        --compress draco \
        --texture-compress "$TEXTURE_FORMAT" 2>/dev/null; then

        echo "  ‚úÖ Optimisation de base r√©ussie"

        # Appliquer les optimisations suppl√©mentaires en cha√Æne
        local temp_file="$output_path.tmp"
        local current_file="$output_path"

        # Resize des textures si n√©cessaire
        echo "  üîÑ Redimensionnement des textures..."
        if gltf-transform resize "$current_file" "$temp_file" \
            --width "$TEXTURE_SIZE" --height "$TEXTURE_SIZE" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Textures redimensionn√©es"
        fi

        # WebP avec qualit√© sp√©cifique
        echo "  üîÑ Compression WebP avec qualit√© $WEBP_QUALITY..."
        if gltf-transform webp "$current_file" "$temp_file" --quality "$WEBP_QUALITY" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ WebP appliqu√©"
        fi

        # Weld (fusion des vertices)
        echo "  üîÑ Fusion des vertices..."
        if gltf-transform weld "$current_file" "$temp_file" --tolerance "$WELD_TOLERANCE" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Weld appliqu√©"
        fi

        # Join (fusion des meshes)
        echo "  üîÑ Fusion des meshes..."
        if gltf-transform join "$current_file" "$temp_file" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Join appliqu√©"
        fi

        # Instance (cr√©ation d'instances)
        echo "  üîÑ Cr√©ation d'instances..."
        if gltf-transform instance "$current_file" "$temp_file" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Instance appliqu√©"
        fi

        # Optimisations sp√©cifiques aux animations
        if [[ "$has_anim" == true ]]; then
            echo "  üîÑ Optimisation des animations..."

            # Resample (r√©-√©chantillonnage)
            if gltf-transform resample "$current_file" "$temp_file" --tolerance "$RESAMPLE_TOLERANCE" 2>/dev/null; then
                mv "$temp_file" "$current_file"
                echo "  ‚úÖ Resample appliqu√©"
            fi

            # Sparse (compression sparse)
            if gltf-transform sparse "$current_file" "$temp_file" 2>/dev/null; then
                mv "$temp_file" "$current_file"
                echo "  ‚úÖ Sparse appliqu√©"
            fi
        fi

        # Prune final (nettoyage)
        echo "  üîÑ Nettoyage final..."
        if gltf-transform prune "$current_file" "$temp_file" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Prune appliqu√©"
        fi

        success_count=$((success_count + 1))
        return 0
    fi

    # M√©thode 2: Pipeline manuel √©tape par √©tape
    echo "  ‚ö†Ô∏è  √âchec de optimize, tentative pipeline manuel..."

    # Copie de base
    cp "$input_file" "$output_path"
    local current_file="$output_path"
    local temp_file="$output_path.tmp"

    # Draco en premier
    echo "  üîÑ Compression Draco..."
    if gltf-transform draco "$current_file" "$temp_file" --method "$DRACO_METHOD" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Draco appliqu√©"
    fi

    # Resize des textures
    echo "  üîÑ Redimensionnement des textures..."
    if gltf-transform resize "$current_file" "$temp_file" \
        --width "$TEXTURE_SIZE" --height "$TEXTURE_SIZE" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Textures redimensionn√©es"
    fi

    # WebP
    echo "  üîÑ Compression WebP..."
    if gltf-transform webp "$current_file" "$temp_file" --quality "$WEBP_QUALITY" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ WebP appliqu√©"
    fi

    # Weld
    echo "  üîÑ Fusion des vertices..."
    if gltf-transform weld "$current_file" "$temp_file" --tolerance "$WELD_TOLERANCE" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Weld appliqu√©"
    fi

    # Join
    echo "  üîÑ Fusion des meshes..."
    if gltf-transform join "$current_file" "$temp_file" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Join appliqu√©"
    fi

    # Instance
    echo "  üîÑ Cr√©ation d'instances..."
    if gltf-transform instance "$current_file" "$temp_file" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Instance appliqu√©"
    fi

    # Optimisations d'animations si n√©cessaire
    if [[ "$has_anim" == true ]]; then
        echo "  üîÑ Optimisation des animations..."

        if gltf-transform resample "$current_file" "$temp_file" --tolerance "$RESAMPLE_TOLERANCE" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Resample appliqu√©"
        fi

        if gltf-transform sparse "$current_file" "$temp_file" 2>/dev/null; then
            mv "$temp_file" "$current_file"
            echo "  ‚úÖ Sparse appliqu√©"
        fi
    fi

    # Prune final
    echo "  üîÑ Nettoyage final..."
    if gltf-transform prune "$current_file" "$temp_file" 2>/dev/null; then
        mv "$temp_file" "$current_file"
        echo "  ‚úÖ Prune appliqu√©"
    fi

    success_count=$((success_count + 1))
    return 0
}

# Fonction pour calculer les statistiques de taille
calculate_size_stats() {
    local input_file="$1"
    local output_file="$2"

    if [[ -f "$input_file" && -f "$output_file" ]]; then
        local original_size=$(stat -f%z "$input_file" 2>/dev/null || stat -c%s "$input_file" 2>/dev/null || echo "0")
        local optimized_size=$(stat -f%z "$output_file" 2>/dev/null || stat -c%s "$output_file" 2>/dev/null || echo "0")

        if [[ "$original_size" != "0" && "$optimized_size" != "0" ]]; then
            local reduction=$((100 - (optimized_size * 100 / original_size)))

            # Formatage des tailles
            local orig_formatted opt_formatted
            if command -v numfmt &> /dev/null; then
                orig_formatted=$(numfmt --to=iec "$original_size")
                opt_formatted=$(numfmt --to=iec "$optimized_size")
            else
                orig_formatted="${original_size} bytes"
                opt_formatted="${optimized_size} bytes"
            fi

            echo "  üìä Taille: $orig_formatted ‚Üí $opt_formatted (${reduction}% de r√©duction)"

            total_original_size=$((total_original_size + original_size))
            total_optimized_size=$((total_optimized_size + optimized_size))
        fi
    fi
}

# Recherche et traitement des fichiers
count=0
total_files=$(find "$SOURCE_DIR" \( -iname "*.glb" -o -iname "*.gltf" \) -type f | wc -l)

if [ "$total_files" -eq 0 ]; then
    echo "‚ùå Aucun fichier GLB/glTF trouv√© dans $SOURCE_DIR"
    exit 1
fi

echo "üìä $total_files fichiers trouv√©s"
echo ""

# Traitement des fichiers
while IFS= read -r input_file; do
    count=$((count + 1))

    # Calcul du chemin de sortie
    relative_path="${input_file#$SOURCE_DIR/}"
    output_path="$OUTPUT_DIR/$relative_path"

    # Cr√©ation des dossiers n√©cessaires
    mkdir -p "$(dirname "$output_path")"

    # Optimisation du fichier
    optimize_file "$input_file" "$output_path" "$count" "$total_files"

    # Calcul des statistiques
    calculate_size_stats "$input_file" "$output_path"

    echo ""
done < <(find "$SOURCE_DIR" \( -iname "*.glb" -o -iname "*.gltf" \) -type f)

# Statistiques finales
echo "üéâ Optimisation termin√©e !"
echo ""
echo "üìä Statistiques:"
echo "   - Fichiers trait√©s: $total_files"
echo "   - Succ√®s: $success_count"
echo "   - Erreurs: $error_count"

if [[ $total_original_size -gt 0 && $total_optimized_size -gt 0 ]]; then
    local total_reduction=$((100 - (total_optimized_size * 100 / total_original_size)))

    local total_orig_formatted total_opt_formatted
    if command -v numfmt &> /dev/null; then
        total_orig_formatted=$(numfmt --to=iec $total_original_size)
        total_opt_formatted=$(numfmt --to=iec $total_optimized_size)
    else
        total_orig_formatted="${total_original_size} bytes"
        total_opt_formatted="${total_optimized_size} bytes"
    fi

    echo "   - Taille totale: $total_orig_formatted ‚Üí $total_opt_formatted"
    echo "   - R√©duction totale: ${total_reduction}%"
fi

echo ""
echo "üí° Optimisations appliqu√©es s√©quentiellement:"
echo "   ‚úÖ Compression Draco ($DRACO_METHOD)"
echo "   ‚úÖ Textures redimensionn√©es ($TEXTURE_SIZE px max)"
echo "   ‚úÖ Compression $TEXTURE_FORMAT (qualit√© $WEBP_QUALITY)"
echo "   ‚úÖ Weld (tolerance $WELD_TOLERANCE) - fusion des vertices"
echo "   ‚úÖ Join - fusion des meshes"
echo "   ‚úÖ Instance - cr√©ation d'instances pour les meshes dupliqu√©s"
echo "   ‚úÖ Resample (tolerance $RESAMPLE_TOLERANCE) - pour les animations"
echo "   ‚úÖ Sparse - compression sparse des animations"
echo "   ‚úÖ Prune - nettoyage des donn√©es inutilis√©es"
echo ""
echo "üí° Pour Three.js avec Draco, configurez votre loader:"
echo ""
echo "üìù Code Three.js:"
cat << 'EOF'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';

// Configuration du DRACOLoader
const dracoLoader = new DRACOLoader();
dracoLoader.setDecoderPath('/draco/'); // Chemin vers les d√©codeurs
dracoLoader.preload();

// Configuration du GLTFLoader
const gltfLoader = new GLTFLoader();
gltfLoader.setDRACOLoader(dracoLoader);

// Chargement du mod√®le optimis√©
gltfLoader.load('model_optimized.glb', (gltf) => {
    scene.add(gltf.scene);
});

// N'oubliez pas de nettoyer
dracoLoader.dispose();
EOF

echo ""
echo "üì¶ T√©l√©chargez les d√©codeurs Draco depuis:"
echo "   https://www.gstatic.com/draco/versioned/decoders/1.5.7/"
echo "   Fichiers requis: draco_decoder.js et draco_decoder.wasm"
echo ""
echo "üîó Documentation compl√®te:"
echo "   https://gltf-transform.dev/cli"